akka {
  actor {
    provider = "cluster"
    allow-java-serialization = on
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }
    serialization-bindings {
      "blockchainapp.actors.Messages$" = jackson-json
      "blockchainapp.actors.Messages$RequestChain$" = jackson-json
      "blockchainapp.actors.Messages$RespondChain" = jackson-json
      "blockchainapp.models.Block" = jackson-json
      "blockchainapp.models.Transaction" = jackson-json
      "blockchainapp.models.Account" = jackson-json
    }
  }

  serialization.jackson {
    jackson-modules += "com.fasterxml.jackson.module.scala.DefaultScalaModule"
  }

  remote {
    artery {
      transport = tcp
      canonical.hostname = "127.0.0.1"
      canonical.port = 2551
      bind.hostname = "0.0.0.0"
      bind.port = 0 // Temporary, will be corrected
    }
  }

  cluster {
    seed-nodes = [
      "akka://BlockchainCluster@127.0.0.1:2551"
    ]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  loglevel = "INFO"

  serialization.jackson {
    jackson-modules = []
  }

  discovery {
    method = akka-dns
    loglevel = "OFF"
  }

  management {
    loglevel = "OFF"
    http {
      hostname = "127.0.0.1"
      port = 8558
      bind-hostname = "0.0.0.0"
      bind-port = 8558
    }
  }

  cluster.pubsub {
    name = "distributed-pub-sub"
    role = ""
    routing-logic = random
    gossip-interval = 1s
    removed-time-to-live = 120s
    max-delta-elements = 3000
  }
}

akka.loggers = ["akka.event.slf4j.Slf4jLogger"]
akka.logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
